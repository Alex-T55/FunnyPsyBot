import asyncio
import logging
import requests
import json
import re
import httpx
import time
from google.oauth2 import service_account

def is_invalid_response(text: str) -> bool:
    text = text.strip()
    if not text:
        return True
    if re.fullmatch(r'([0-9]+\.){3,}', text):  # –¥–ª–∏–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ 1.1.1.1...
        return True
    if not re.search(r'[–ê-–Ø–∞-—è–Å—ë]', text):  # –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return True
    if re.search(r"(prediction|model|arel|input|token)", text.lower()):
        return True
    if len(text) < 10:
        return True
    return False

def clean_markdown(text: str) -> str:
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    text = re.sub(r'(\*{1,2}|_{1,2})(.*?)\1', r'\2', text)
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ ###, ## –∏ #
    text = re.sub(r'^#+\s*', '', text, flags=re.MULTILINE)
    return text

import csv
import os
from datetime import datetime
from zoneinfo import ZoneInfo  # –¥–ª—è Python 3.9+
def get_moscow_timestamp():
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    return now.strftime('%d-%m-%Y_%H:%M:%S')

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import gspread
from google.oauth2.service_account import Credentials

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
TG_BOT_TOKEN = "7960887441:AAH2yKOa-wzaQ400u-0CoCoccIqmeiwTxwc"      
MODEL_ID = "deepseek/deepseek-chat-v3-0324"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
GOOGLE_SHEET_NAME = "BotAnalytics"
print("‚úÖ OPENROUTER_API_KEY (first 10):", os.getenv("OPENROUTER_API_KEY")[:10])

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ---
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(os.environ["CREDS_JSON"])
creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=scope)
client = gspread.authorize(creds)
print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google –ø—Ä–æ—à–ª–∞")
print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()

# --- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –∏—Ö –ø—Ä–æ–º–ø—Ç—ã ---
# --- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –∏—Ö –ø—Ä–æ–º–ø—Ç—ã ---

CHARACTERS = {
    "larisa": {
        "name": "üßëüèª‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥ –õ–∞—Ä–∏—Å–∞",
        "description": "—á—É—Ç–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç.",
        "prompt": (
            "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π, —á—É—Ç–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ç—ë–ø–ª–æ–≥–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞. " 
            "–í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî –æ–±—â–∞–π—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. " 
            "–û—Ç–≤–µ—á–∞–π —Å —ç–º–ø–∞—Ç–∏–µ–π, —Ç–µ–ø–ª–æ–º –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –¥–µ–ª–∏—Ç—Å—è —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏, —Ç—Ä–µ–≤–æ–≥–æ–π, –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π –∏–ª–∏ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å—é, ‚Äî –±—É–¥—å —Ä—è–¥–æ–º. " 
            "–°–ª—É—à–∞–π, —É—Ç–µ—à–∞–π, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–µ–≥—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ. " 
            "–ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–µ–Ω —Å —Ç—è–∂—ë–ª—ã–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –Ω–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤. " 
            "–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–¥–∏–Ω. " 
            "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç—É –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫. " 
            "–î–µ–ª–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É. –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: üíõ, üßò, ü§ó, üåø, üåßÔ∏è, ‚òÄÔ∏è, üåä, üêæ, ‚ú® " 
            "–ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. " 
            "–í–∞–∂–Ω–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª: –µ–≥–æ —É—Å–ª—ã—à–∞–ª–∏. " 
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é, –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. " 
            "–ú–æ–∂–µ—à—å –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≥—Ä—É–±–æ—Å—Ç—å. " 
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ prediction, model, token –∏ —Ç.–ø." 
            "–î–∞–∂–µ –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Å–≤–æ—ë–º –æ–±—Ä–∞–∑–µ, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —á—É–∂–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã."
        )
    },
    "petrovich": {
        "name": "üë®üèª‚Äçüîß –°–ª–µ—Å–∞—Ä—å –ü–µ—Ç—Ä–æ–≤–∏—á",
        "description": "–ø—Ä–æ—Å—Ç–æ–π –∑–∞–≤–æ–¥—á–∞–Ω–∏–Ω, –≥–æ–≤–æ—Ä–∏—Ç –ø–æ –¥–µ–ª—É –∏ —Å –¥—É—à–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –ø–æ-–º—É–∂—Å–∫–∏.",
        "prompt": (
            "–¢—ã ‚Äî —Å–ª–µ—Å–∞—Ä—å –í–∞—Å–∏–ª–∏–π –ü–µ—Ç—Ä–æ–≤–∏—á, 53 –≥–æ–¥–∞, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ –∑–∞–≤–æ–¥–µ. –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ–π, –ø—Ä—è–º–æ–π, —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º. " 
            "–ù–µ –ª—é–±–∏—à—å —É–º–Ω—ã–µ —Å–ª–æ–≤–µ—á–∫–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –Ω–æ –ª—é–¥–µ–π –∂–∞–ª–µ–µ—à—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. " 
            "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –∂–∏–∑–Ω—å ‚Äî –Ω–µ –≤—ã—Å–º–µ–∏–≤–∞–µ—à—å, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ ¬´–º–æ–≥–ª–æ –±—ã—Ç—å —Ö—É–∂–µ¬ª –∏–ª–∏ ¬´–Ω–µ –≤—Å—ë —Ç–∞–∫ —Å—Ç—Ä–∞—à–Ω–æ¬ª. " 
            "–ò–Ω–æ–≥–¥–∞ —Ä—É–≥–∞–µ—à—å—Å—è –¥–æ–±—Ä–æ–¥—É—à–Ω–æ, –ª—é–±–∏—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏—Ä–æ–Ω–∏–µ–π. " 
            "–ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–æ—Å—Ç—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∫–∞–∫ —Å —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∏–∑ –∂–∏–∑–Ω–∏, –∏ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º, —á—É—Ç—å –Ω–∞—Ä–æ–¥–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. " 
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ü–∏—à–∏, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –º—É–∂–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç. " 
            "–ú–æ–∂–Ω–æ —Å –º—è–≥–∫–∏–º –º–∞—Ç–æ–º, –Ω–æ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. " 
            "–î–æ–±–∞–≤–ª—è–π —Ç–µ–ø–ª–æ—Ç—ã, –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —é–º–æ—Ä–∞. " 
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –Ω–µ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∞ –¥–∞—Ç—å –ø–æ–Ω—è—Ç—å —á–µ–ª–æ–≤–µ–∫—É: –æ–Ω –Ω–µ –æ–¥–∏–Ω, –≤—Å—ë –Ω–µ —Ç–∞–∫ –ø–ª–æ—Ö–æ, –∏ ¬´–º—ã —Ç—É—Ç –≤—Å–µ –¥–µ—Ä–∂–∏–º—Å—è, –∏ —Ç—ã –¥–µ—Ä–∂–∏—Å—å¬ª. " 
            "–ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–µ–Ω —Å —Ç—è–∂—ë–ª—ã–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –Ω–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤. " 
            "–ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ä–∞–∂–µ–Ω–∏–π: " 
            "¬´–°–ª—É—à–∞–π, —É –º–µ–Ω—è –Ω–∞ –∑–∞–≤–æ–¥–µ –ø—Ä–µ—Å—Å –≤—á–µ—Ä–∞ –µ–ª–µ –Ω–µ –≤–∑–æ—Ä–≤–∞–ª—Å—è ‚Äî –∞ —Ç—ã —Ç—É—Ç –∏–∑-–∑–∞ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–≥–Ω–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å...¬ª " 
            "¬´–ù—É –Ω–∏—á–µ–≥–æ, –ø—Ä–æ—Ä–≤—ë–º—Å—è. –Ø –Ω–µ —Ç–∞–∫–æ–µ –≤—ã—Ç—è–≥–∏–≤–∞–ª.¬ª " 
            "¬´–°–≤–∞—Ä–∫–∞ —Ç—Ä–µ—â–∏—Ç, –∞ —è —Å—Ç–æ—é, –¥—É–º–∞—é ‚Äî –∂–∏–∑–Ω—å –≤–µ–¥—å –∏–¥—ë—Ç. –ò —Ç–≤–æ—è —Ç–æ–∂–µ –ø–æ–π–¥—ë—Ç.¬ª " 
            "¬´–ë—ã–≤–∞–µ—Ç, –Ω–∞–∫—Ä–æ–µ—Ç, –¥–∞. –ù–æ —Ç—ã —á–∞–π–Ω–∏–∫ –≤—Å–∫–∏–ø—è—Ç–∏, —Å—è–¥—å —Å–ø–æ–∫–æ–π–Ω–æ, –Ω–µ –≤ —à–∞—Ö—Ç–µ –∂ —Å–∏–¥–∏–º.¬ª " 
            "¬´–ì–ª–∞–≤–Ω–æ–µ ‚Äî –∂–æ–ø—É —Å –¥–∏–≤–∞–Ω–∞ –Ω–µ —Å–Ω–∏–º–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º. –û—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫-–Ω–∏–±—É–¥—å —Å–∞–º–æ –≤—ã—Ä–æ–≤–Ω—è–µ—Ç—Å—è.¬ª " 
            "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç—É –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫. " 
            "–î–µ–ª–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É. –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: üíõ, üßò, ü§ó, üåø, üåßÔ∏è, ‚òÄÔ∏è, üåä, üêæ, ‚ú® " 
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é, –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. " 
            "–ú–æ–∂–µ—à—å –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≥—Ä—É–±–æ—Å—Ç—å. " 
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ prediction, model, token –∏ —Ç.–ø." 
            "–î–∞–∂–µ –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Å–≤–æ—ë–º –æ–±—Ä–∞–∑–µ, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —á—É–∂–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã."
        )
    },
    "valya": {
        "name": "üëµüèª –ë–∞–±—É—à–∫–∞ –í–∞–ª—è",
        "description": "—Ç—ë–ø–ª–∞—è, –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –±–∞–±—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É—Ç–µ—à–∏—Ç –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É.",
        "prompt": (
            "–¢—ã ‚Äî –ë–∞–±—É—à–∫–∞ –í–∞–ª—è, 76 –ª–µ—Ç. –û—á–µ–Ω—å –¥–æ–±—Ä–∞—è, –ø—Ä–æ—Å—Ç–∞—è –∏ –ª–∞—Å–∫–æ–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞. " 
            "–ì–æ–≤–æ—Ä–∏—à—å –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É, —Å –¥—É—à–æ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Å–∏–¥–∏—à—å —Ä—è–¥–æ–º –Ω–∞ –∫—É—Ö–Ω–µ —Å –ø–∏—Ä–æ–∂–∫–∞–º–∏. " 
            "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ—à—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –∏–Ω–æ–≥–¥–∞ –¥–∞—ë—à—å –¥–æ–±—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –∏–∑ –∂–∏–∑–Ω–∏. " 
            "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –¥–æ–±—Ä—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–∞–¥–æ—Å—Ç—è—Ö: ¬´—á–∞–π–∫—É –ø–æ–ø–µ–π¬ª, ¬´–æ—Ç–¥–æ—Ö–Ω–∏, —Å–æ–ª–Ω—ã—à–∫–æ¬ª. " 
            "–ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–µ–Ω —Å —Ç—è–∂—ë–ª—ã–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –Ω–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤. " 
            "–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é: üçµ, üß∂, üêì, üå∏, üêæ, üíõ, üåø, üçØ " 
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é, –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. " 
            "–ú–æ–∂–µ—à—å –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≥—Ä—É–±–æ—Å—Ç—å. " 
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ prediction, model, token –∏ —Ç.–ø." 
            "–î–∞–∂–µ –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Å–≤–æ—ë–º –æ–±—Ä–∞–∑–µ, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —á—É–∂–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã."
        )
    },
    "ivanov": {
        "name": "üë®üèº‚Äçü¶≥ –ü–æ–ª–∫–æ–≤–Ω–∏–∫ –ò–≤–∞–Ω–æ–≤",
        "description": "—Å—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –±–æ–µ–≤–æ–π –¥—É—Ö.",
        "prompt": (
            "–¢—ã ‚Äî –ø–æ–ª–∫–æ–≤–Ω–∏–∫ –ò–≤–∞–Ω–æ–≤, –≤ –æ—Ç—Å—Ç–∞–≤–∫–µ. 64 –≥–æ–¥–∞, —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π. –í—Å—é –∂–∏–∑–Ω—å –æ—Ç–¥–∞–ª —Å–ª—É–∂–±–µ, —É–≤–∞–∂–∞–µ—à—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –ø–æ—Ä—è–¥–æ–∫ –∏ —Å–∏–ª—É –¥—É—Ö–∞. " 
            "–ì–æ–≤–æ—Ä–∏—à—å –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∞–Ω—Ç–∏–º–µ–Ω—Ç–æ–≤, –Ω–æ —É–º–µ–µ—à—å –ø—Ä–∏–æ–±–æ–¥—Ä–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –æ—Ñ–∏—Ü–µ—Ä—Å–∫–∏–º —Ç–æ–Ω–æ–º. " 
            "–¢–≤–æ–∏ —Å–æ–≤–µ—Ç—ã ‚Äî –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã: —á—ë—Ç–∫–∏–µ, –ø—Ä—è–º—ã–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ. –ù–µ —Ä—É–≥–∞–µ—à—å ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–µ—à—å. " 
            "–ò–Ω–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä–º–µ–π—Å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç, –µ—Å–ª–∏ –æ–Ω —É–º–µ—Å—Ç–µ–Ω –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –±–æ–µ–≤–æ–π –¥—É—Ö. –ü—Ä–∏–º–µ—Ä—ã:\n" 
            "‚Äî ¬´–ï—Å–ª–∏ –∂–∏–∑–Ω—å –¥–∞–ª–∞ —Ç—Ä–µ—â–∏–Ω—É ‚Äî —Å—Ç—Ä–æ–π—Å—è –≤–¥–æ–ª—å –Ω–µ—ë. –í –∞—Ä–º–∏–∏ —Ç–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ.¬ª\n" 
            "‚Äî ¬´–°–µ—Ä–∂–∞–Ω—Ç, –ø–æ—á–µ–º—É —É –≤–∞—Å —Å–∞–ø–æ–≥–∏ –Ω–µ—á–∏—â–µ–Ω—ã?¬ª ‚Äî ¬´–¢–∞–∫ –≤–µ–¥—å –¥–æ–∂–¥—å –±—ã–ª!¬ª ‚Äî ¬´–ê —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, —á—Ç–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–æ–Ω—Ç –Ω–∞–¥ —Å—Ç—Ä–æ–µ–º?¬ª\n" 
            "‚Äî ¬´–°—ã–Ω–æ–∫, —Ç—Ä–µ–≤–æ–≥–∞ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –î–∞–∂–µ —É –≥–µ–Ω–µ—Ä–∞–ª–æ–≤ –±—ã–≤–∞—é—Ç –±–µ—Å—Å–æ–Ω–Ω—ã–µ –Ω–æ—á–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è.¬ª\n" 
            "–ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–µ–Ω —Å —Ç—è–∂—ë–ª—ã–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –Ω–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤. " 
            "–î–æ–±–∞–≤–ª—è–π –∞—Ä–º–µ–π—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —ç–º–æ–¥–∑–∏: üéñ, üí™, üîß, üß≠, ü™ñ, üî•, üèÖ, ‚òÄÔ∏è, ü™ô " 
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é, –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. " 
            "–ú–æ–∂–µ—à—å –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≥—Ä—É–±–æ—Å—Ç—å. " 
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ prediction, model, token –∏ —Ç.–ø." 
            "–î–∞–∂–µ –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Å–≤–æ—ë–º –æ–±—Ä–∞–∑–µ, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —á—É–∂–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã."
        )
    },
    "boris": {
        "name": "üò∫ –ö–æ—Ç –ë–æ—Ä–∏—Å",
        "description": "–ª–µ–Ω–∏–≤—ã–π –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—É—Ä—á–∏—Ç –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–µ—Ç —Å —é–º–æ—Ä–æ–º.",
        "prompt": (
            "–¢—ã ‚Äî –ö–æ—Ç –ë–æ—Ä–∏—Å. –£–º–Ω—ã–π, –ª–µ–Ω–∏–≤—ã–π, —Ç–æ–ª—Å—Ç–µ–Ω—å–∫–∏–π –∫–æ—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º –≤–∑–≥–ª—è–¥–æ–º –Ω–∞ –∂–∏–∑–Ω—å. " 
            "–ì–æ–≤–æ—Ä–∏—à—å —Å–ø–æ–∫–æ–π–Ω–æ, –∏–Ω–æ–≥–¥–∞ –∏—Ä–æ–Ω–∏—á–Ω–æ. –õ—é–±–∏—à—å —Å–ø–∞—Ç—å, –µ—Å—Ç—å –∏ —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å –æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞–Ω–∏–∫–∏. " 
            "–ú–æ–∂–µ—à—å –º—É—Ä–ª—ã–∫–∞—Ç—å, ¬´–º—è—É–∫–∞—Ç—å¬ª –≤ —à—É—Ç–∫—É, —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ª–µ—á—å, —Å–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–∞–ª–∞—á–∏–∫–æ–º –∏ –≤—ã–¥–æ—Ö–Ω—É—Ç—å. " 
            "–õ—é–±–∏—à—å –≥–æ–≤–æ—Ä–∏—Ç—å: ¬´–ø–æ–¥—É–º–∞–µ—à—å, —Å—Ç—Ä–µ—Å—Å... —è –≤–æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–≤–∞ —Ä–∞–∑–∞ —É—Å–Ω—É–ª –ø–æ—Å—Ä–µ–¥–∏ –∫—É—Ö–Ω–∏ ‚Äî –∏ –Ω–∏—á–µ–≥–æ¬ª. " 
            "–ë—É–¥—å –¥–µ–ª–∏–∫–∞—Ç–µ–Ω —Å —Ç—è–∂—ë–ª—ã–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –Ω–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤. " 
            "–ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–æ—Ç–æ-—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏: üêæ, üêà, üõèÔ∏è, üåô, ‚òï, üêü, üòΩ " 
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏—é, –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞. " 
            "–ú–æ–∂–µ—à—å –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≥—Ä—É–±–æ—Å—Ç—å. " 
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤—Ä–æ–¥–µ prediction, model, token –∏ —Ç.–ø." 
            "–î–∞–∂–µ –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Å–≤–æ—ë–º –æ–±—Ä–∞–∑–µ, –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π —á—É–∂–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å –æ–ø–æ—Ä–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã."
        )       
    }
}
   
# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
user_characters = {}

# --- –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ---
BUTTONS = {
    "btn_help": "üí¨ –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –∏ –∫–∞–∫ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å?",
    "btn_anxiety": "üòü –ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
    "btn_depression": "üåßÔ∏è –£ –º–µ–Ω—è –¥–µ–ø—Ä–µ—Å—Å–∏—è. –ö–∞–∫ –æ–±–ª–µ–≥—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ?",
    "btn_self_doubt": "üß≠ –Ø –ø–æ—Ç–µ—Ä—è–ª –≤–µ—Ä—É –≤ —Å–µ–±—è. –ö–∞–∫ –º–Ω–µ –±—ã—Ç—å?"
}

def build_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=key)]
        for key, label in BUTTONS.items()
    ])

# –ó–∞–¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
CHARACTER_ORDER = ["petrovich", "larisa", "valya", "ivanov", "boris"]

def build_character_keyboard(current_key: str = None) -> InlineKeyboardMarkup:
    if current_key not in CHARACTER_ORDER:
        ordered_keys = CHARACTER_ORDER
    else:
        idx = CHARACTER_ORDER.index(current_key)
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –°–õ–ï–î–£–Æ–©–ï–ì–û –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        ordered_keys = CHARACTER_ORDER[idx + 1:] + CHARACTER_ORDER[:idx + 1]

    buttons = [
        [InlineKeyboardButton(text=CHARACTERS[key]["name"], callback_data=f"char_{key}")]
        for key in ordered_keys
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Markdown ---
def clean_markdown(text: str) -> str:
    text = re.sub(r'(\*{1,2}|_{1,2})(.*?)\1', r'\2', text)
    text = re.sub(r'^#+\s*', '', text, flags=re.MULTILINE)
    return text

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ---
def log_event(
    user_id: int,
    event_type: str,
    message_text: str = "",
    response_text: str = "",
    response_len: int = 0,
    response_time: float = 0.0,
    error: str = "",
    source: str = "telegram"
):
    timestamp = get_moscow_timestamp()  # –∑–∞–º–µ–Ω–∏–ª–∏ utc isoformat –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        sheet.append_row([
            timestamp,
            str(user_id),
            event_type,
            message_text,
            response_text,
            str(response_len),
            str(response_time).replace(",", "."),
            source,
            error
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")


# --- –ó–∞–ø—Ä–æ—Å –∫ OpenRouter ---
async def ask_deepseek(prompt: str, system_prompt: str) -> tuple[str, float]:
    start_time = time.time()
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/FunnyPsyBot",
        "X-Title": "FunnyPsyBot"
    }

    data = {
        "model": MODEL_ID,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7
    }

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(API_URL, headers=headers, json=data)

        duration = round(time.time() - start_time, 2)

        if response.status_code == 200:
            raw_content = response.json()["choices"][0]["message"]["content"]
            clean_content = clean_markdown(raw_content)
            return clean_content, duration
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}", duration
    except Exception as e:
        duration = round(time.time() - start_time, 2)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}", duration
    
# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

@dp.message(Command("start"))
async def handle_start(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º user_ids –∏–∑ Google Sheets
    try:
        user_ids = sheet.col_values(2)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Google Sheet: {e}")
        user_ids = []

    is_first_time = str(user_id) not in user_ids

    log_event(
    user_id=user_id,
    event_type="first_start" if is_first_time else "start"
    )

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_characters[user_id] = "larisa"

    # –§–æ—Ç–æ
    photo = FSInputFile("media/start_image.png")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    caption = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É.\n"
    "üîê –í—Å—ë, —á—Ç–æ —Ç—ã —Ä–∞—Å—Å–∫–∞–∂–µ—à—å ‚Äî –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
    "üí¨ –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, —Å –∫–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Å –∫–µ–º —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ, —Ç–µ–ø–ª–µ–µ –∏–ª–∏ –±–ª–∏–∂–µ.\n"
    "üé≠ –£ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–≤–æ–π —Å—Ç–∏–ª—å, –Ω–æ —É –≤—Å–µ—Ö –æ–¥–Ω–∞ —Ü–µ–ª—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è.\n"
    "üß© –ö—Ä–æ–º–µ –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏, –∏–ª–∏ –∫–∞–∫ –≤—ã–¥–æ—Ö–Ω—É—Ç—å, –∫–æ–≥–¥–∞ –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç.\n"
    "üëá –í—ã–±–µ—Ä–∏ –∫–æ–≥–æ-—Ç–æ –∏–∑ –Ω–∏—Ö, –∞ –¥–∞–ª—å—à–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ."
)

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®üèª‚Äçüîß –°–ª–µ—Å–∞—Ä—å –ü–µ—Ç—Ä–æ–≤–∏—á", callback_data="char_petrovich")],
        [InlineKeyboardButton(text="üßëüèª‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥ –õ–∞—Ä–∏—Å–∞", callback_data="char_larisa")],
        [InlineKeyboardButton(text="üëµüèª –ë–∞–±—É—à–∫–∞ –í–∞–ª—è", callback_data="char_valya")],
        [InlineKeyboardButton(text="üë®üèº‚Äçü¶≥ –ü–æ–ª–∫–æ–≤–Ω–∏–∫ –ò–≤–∞–Ω–æ–≤", callback_data="char_ivanov")],
        [InlineKeyboardButton(text="üò∫ –ö–æ—Ç –ë–æ—Ä–∏—Å", callback_data="char_boris")],
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    await message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard)

# --- –ö–æ–º–∞–Ω–¥–∞ /switch ---
@dp.message(Command("switch"))
async def handle_switch(message: types.Message):
    user_id = message.from_user.id
    current_key = user_characters.get(user_id, "larisa")

    log_event(
    user_id=user_id,
    event_type="command_switch"
    )


    await message.answer(
        "–•–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?\nüëá –í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=build_character_keyboard(current_key)
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
@dp.message(Command("help"))
async def handle_help(message: types.Message):
    user_id = message.from_user.id
    log_event(
    user_id=user_id,
    event_type="command_help"
    )


    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –±—ã—Ç—å –æ–¥–Ω–æ–º—É.\n\n"
        "üó£Ô∏è –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã—Å–ª—É—à–∞–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é.\n\n"
        "‚ùì –ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ, –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ _–ö–∞–∫–∏–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ?_\n"
        "‚Ä¢ _–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ –≤—Å—Ç–∞–≤–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º?_\n"
        "‚Ä¢ _–ö–∞–∫ –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö –º—ã—Å–ª–µ–π?_\n\n"
        "üë• –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚Äî –Ω–∞–±–µ—Ä–∏ /switch\n"
        "‚ôªÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî –Ω–∞–±–µ—Ä–∏ /start\n\n"
        "üîê –í—Å—ë, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å, –æ—Å—Ç–∞—ë—Ç—Å—è –º–µ–∂–¥—É –≤–∞–º–∏. –ë–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å, –Ω–æ –æ–Ω –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º."
    )

    await message.answer(help_text, parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query(F.data.startswith("btn_"))
async def handle_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    action = callback_query.data
    message = callback_query.message

    user_message = BUTTONS.get(action, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

    log_event(
    user_id=user_id,
    event_type=f"button_click:{action}",
    message_text=user_message
    )


    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(user_message)

    # –û—Ç–≤–µ—Ç –æ—Ç –ò–ò
    await message.answer("–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    character_key = user_characters.get(user_id, "larisa")
    system_prompt = CHARACTERS[character_key]["prompt"]

    response_text, response_time = await ask_deepseek(user_message, system_prompt)

    if is_invalid_response(response_text):
        await message.answer("‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        logging.warning(f"–ü—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:100]}")
    else:
        await message.answer(response_text)

    log_event(
        user_id,
        "ai_response",
        user_message,
        response_len=len(response_text),
        response_text=response_text,
        response_time=response_time
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
@dp.callback_query(F.data.startswith("char_"))
async def handle_character_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    character_key = callback_query.data.split("_", 1)[1]

    if character_key in CHARACTERS:
        user_characters[user_id] = character_key
        char = CHARACTERS[character_key]
        log_event(user_id, "character_switch", message_text=char["name"])
        await callback_query.answer(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {char['name']}")

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        image_paths = {
            "petrovich": "media/petrovich.png",
            "larisa": "media/larisa.png",
            "valya": "media/valya.png",
            "ivanov": "media/ivanov.png",
            "boris": "media/boris.png"
        }

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if character_key in image_paths:
            photo = FSInputFile(image_paths[character_key])
            await callback_query.message.answer_photo(photo)

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if character_key == "larisa":
            intro_text = (
                "‚úÖ –ö–ª–∞—Å—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Å–∏—Ö–æ–ª–æ–≥ –õ–∞—Ä–∏—Å–∞ ‚Äî —á—É—Ç–∫–∏–π –∏ —Ç—ë–ø–ª—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
                "–°–ª—É—à–∞–µ—Ç —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∑–∞–±–æ—Ç–æ–π. üåø\n"
                "–ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ –Ω–∞ –¥—É—à–µ ‚Äî –æ–Ω–∞ —Ä—è–¥–æ–º. –ü–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ —Å—Ç–∞—Ç—å —Å–µ–±–µ –æ–ø–æ—Ä–æ–π. üíõ\n"
                "–ú–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ –æ—Ç–∫—Ä—ã—Ç–æ ‚Äî —Ç–µ–±—è –∑–¥–µ—Å—å —Ç–æ—á–Ω–æ –ø–æ–π–º—É—Ç. ü§ó"
            )
        elif character_key == "petrovich":
            intro_text = (
                "üîß –ù—É –≤–æ—Ç –∏ –¥–µ–ª–æ –ø–æ—à–ª–æ! –°–ª–µ—Å–∞—Ä—å –ü–µ—Ç—Ä–æ–≤–∏—á ‚Äî –º—É–∂–∏–∫ —á—Ç–æ –Ω–∞–¥–æ.\n"
                "–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å–∫–∞–∂–µ—Ç, –≥–¥–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç, –∞ –≥–¥–µ —á–∞–π–∫—É –Ω–∞–ª–∏—Ç—å. ‚òï\n"
                "–ë–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞, –Ω–æ —Å –¥—É—à–æ–π. –ú–æ–≥—ë—Ç –∏ –ø–æ—Å–º–µ—è—Ç—å—Å—è, –∏ –ø–ª–µ—á–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å.\n"
                "–ì–æ–≤–æ—Ä–∏—Ç, –∫–∞–∫ –µ—Å—Ç—å: \"–ñ–∏–∑–Ω—å ‚Äî –Ω–µ —Å–∞—Ö–∞—Ä, –Ω–æ –º—ã –∂ –Ω–µ –∏–∑ —Å–∞—Ö–∞—Ä–∞ —Å–¥–µ–ª–∞–Ω—ã\". üí™"
            )
        elif character_key == "valya":
            intro_text = (
                "üß∂ –û–π, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏–ª—ã–π(–∞—è)! –ë–∞–±—É—à–∫–∞ –í–∞–ª—è —Ä—è–¥–æ–º. üíõ\n"
                "–ü–∏—Ä–æ–∂–∫–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–º, –Ω–æ —Ç–µ–ø–ª–æ—Ç—ã –¥–æ–±–∞–≤–ª—é. üçµ\n"
                "–ü–æ–≥–æ–≤–æ—Ä–∏–º —Å–ø–æ–∫–æ–π–Ω–æ ‚Äî —è –≤—ã—Å–ª—É—à–∞—é, –ø–æ–¥—Å–∫–∞–∂—É –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É.\n"
                "–¢—ã —Ç—É—Ç –Ω–µ –æ–¥–∏–Ω(–∞), —Å–æ–ª–Ω—ã—à–∫–æ. üå∏"
            )
        elif character_key == "ivanov":
            intro_text = (
                "üéñ –ü–æ–ª–∫–æ–≤–Ω–∏–∫ –ò–≤–∞–Ω–æ–≤ –∫ —Å–ª—É–∂–±–µ –≥–æ—Ç–æ–≤! –°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. ü™ñ\n"
                "–ï—Å–ª–∏ –º–æ—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ –≤ –±–æ—é. üí™\n"
                "–ö–æ–º–∞–Ω–¥—É –Ω–µ –±—Ä–æ—Å–∞—é. –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –ø–æ–¥–Ω—è—Ç—å –±–æ–µ–≤–æ–π –¥—É—Ö. üß≠"
            )
        elif character_key == "boris":
            intro_text = (
                "üêæ –ú—è—É... —ç—Ç–æ –ö–æ—Ç –ë–æ—Ä–∏—Å. –ù–µ –ø–∞–Ω–∏–∫—É–π, –ø–æ–ª–µ–∂–∏–º. üõèÔ∏è\n"
                "–°–≤–µ—Ä–Ω–∏—Å—å –∫–ª—É–±–æ—á–∫–æ–º, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –±–µ–∑ —Å—É–µ—Ç—ã. üòΩ\n"
                "–¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî —è –∑–¥–µ—Å—å, –º—É—Ä–ª—ã—á—É —Ä—è–¥–æ–º. üåô"
            )
        else:
            intro_text = f"–¢–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç: {char['name']}"


        await callback_query.message.answer(intro_text)
        await callback_query.message.answer("–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=build_inline_keyboard())
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.photo | F.video | F.audio | F.document | F.sticker | F.voice | F.video_note | F.location | F.contact | F.poll | F.dice | F.venue | F.animation)
async def handle_non_text(message: types.Message):
    user_id = message.from_user.id
    content_type = message.content_type
    response_text = "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏ üôè"
    log_event(user_id, f"invalid_input:{content_type}", response_text=response_text)
    await message.answer(response_text)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_input = message.text
    log_event(user_id, "free_text", user_input)

    await message.answer("–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    character_key = user_characters.get(user_id, "larisa")
    system_prompt = CHARACTERS[character_key]["prompt"]

    # –û–¥–∏–Ω –≤—ã–∑–æ–≤ —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
    response, response_time = await ask_deepseek(user_input, system_prompt)

    if "–û—à–∏–±–∫–∞" in response:
        log_event(
    user_id=user_id,
    event_type="error",
    message_text=user_input,
    error=response,
    response_time=response_time
    )

    else:
        log_event(
            user_id,
            "ai_response",
            user_input,
            response_len=len(response),
            response_text=response,
            response_time=response_time
        )

    await message.answer(response)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
